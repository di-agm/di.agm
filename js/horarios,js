// Variables globales
let scheduleMatrix = [];
let activities = [];
let blocks = [];
let daysOfWeek = ["Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado", "Domingo"];

// Funciones de utilidad
function evaluateExpression(expression) {
    try {
        // Limpiar la expresión y evaluar operaciones básicas
        const cleanExpression = expression.replace(/[^0-9+\-*/\(\)\s]/g, '');
        return Function('"use strict"; return (' + cleanExpression + ')')();
    } catch (e) {
        return parseInt(expression) || 0;
    }
}

function convertTimeToMinutes(timeStr) {
    const [hours, minutes] = timeStr.split(':').map(num => parseInt(num));
    return hours * 60 + minutes;
}

function convertMinutesToTime(minutes) {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`;
}

function gcd(a, b) {
    while (b !== 0) {
        const temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

function calculateGCD(numbers) {
    if (numbers.length === 0) return 1;
    let result = numbers[0];
    for (let i = 1; i < numbers.length; i++) {
        result = gcd(result, numbers[i]);
    }
    return result;
}

function trim(str) {
    return str.trim();
}

function addActivity() {
    const container = document.getElementById('activitiesContainer');
    const activityIndex = activities.length;
    
    const activityDiv = document.createElement('div');
    activityDiv.className = 'activity-item';
    activityDiv.id = `activity-${activityIndex}`;  // <--- unique id
    
    activityDiv.innerHTML = `
        <div class="inline-group">
            <div>
                <label>Nombre de la actividad:</label>
                <input type="text" id="activityName${activityIndex}" placeholder="Nombre de la actividad">
            </div>
            <div>
                <button type="button" class="remove-btn" onclick="removeActivity(${activityIndex})">Eliminar</button>
            </div>
        </div>
        <div class="form-group">
            <label>Duración total:</label>
            <input type="text" id="activityDuration${activityIndex}" placeholder="Ej: 120 o 60*2">
        </div>
        <div class="form-group">
            <label>Duración diaria:</label>
            <input type="text" id="activityDailyDuration${activityIndex}" placeholder="Ej: 60 o 30*2">
        </div>
        <div class="form-group">
            <label>Tipo de inicio:</label>
            <select id="activityStartType${activityIndex}">
                <option value="1">Desde el primer horario disponible</option>
                <option value="2">Después de la actividad anterior</option>
            </select>
        </div>
    `;
    
    container.appendChild(activityDiv);
    activities.push({ index: activityIndex });
}

function removeActivity(index) {
    activities = activities.filter(activity => activity.index !== index);
    const elem = document.getElementById(`activity-${index}`);
    if (elem) elem.remove();
}

function addBlock() {
    const container = document.getElementById('blocksContainer');
    const blockIndex = blocks.length;
    
    const blockDiv = document.createElement('div');
    blockDiv.className = 'block-item';
    blockDiv.innerHTML = `
        <div class="inline-group">
            <div>
                <label>Día (1=Lunes, 7=Domingo):</label>
                <select id="blockDay${blockIndex}">
                    <option value="1">Lunes</option>
                    <option value="2">Martes</option>
                    <option value="3">Miércoles</option>
                    <option value="4">Jueves</option>
                    <option value="5">Viernes</option>
                    <option value="6">Sábado</option>
                    <option value="7">Domingo</option>
                </select>
            </div>
            <div>
                <button type="button" class="remove-btn" onclick="removeBlock(${blockIndex})">Eliminar</button>
            </div>
        </div>
        <div class="form-group">
            <label>Hora de inicio y fin (HH:MM - HH:MM):</label>
            <input type="text" id="blockTime${blockIndex}" placeholder="Ej: 12:00 - 13:00">
        </div>
    `;
    
    container.appendChild(blockDiv);
    blocks.push({ index: blockIndex });
}

function removeBlock(index) {
    blocks = blocks.filter(block => block.index !== index);
    document.querySelector(`#blocksContainer .block-item:nth-child(${index + 1})`).remove();
}

// Función principal para generar el horario
function generateSchedule() {
    try {
        // Leer configuración básica
        const numDays = evaluateExpression(document.getElementById('numDays').value);
        const timeRange = document.getElementById('timeRange').value;
        const startDay = parseInt(document.getElementById('startDay').value) - 1; // Ajustar a 0-6
        
        // Validar rango de tiempo
        const timeRangeParts = timeRange.split('-');
        if (timeRangeParts.length !== 2) {
            throw new Error('Formato de hora incorrecto. Use HH:MM - HH:MM');
        }
        
        const startTime = convertTimeToMinutes(trim(timeRangeParts[0]));
        const endTime = convertTimeToMinutes(trim(timeRangeParts[1]));
        
        if (endTime <= startTime) {
            throw new Error('La hora de fin debe ser después de la hora de inicio');
        }
        
        const totalMinutes = endTime - startTime;
        
        // Leer actividades
        const activityData = [];
        const dailyDurations = [];
        
        for (let i = 0; i < activities.length; i++) {
            const nameElement = document.getElementById(`activityName${activities[i].index}`);
            const durationElement = document.getElementById(`activityDuration${activities[i].index}`);
            const dailyDurationElement = document.getElementById(`activityDailyDuration${activities[i].index}`);
            const startTypeElement = document.getElementById(`activityStartType${activities[i].index}`);
            
            if (!nameElement || !durationElement || !dailyDurationElement || !startTypeElement) continue;
            
            const name = nameElement.value;
            const duration = evaluateExpression(durationElement.value);
            const dailyDuration = evaluateExpression(dailyDurationElement.value);
            const startType = parseInt(startTypeElement.value);
            
            if (name && duration > 0 && dailyDuration > 0) {
                activityData.push({ name, duration, dailyDuration, startType });
                dailyDurations.push(dailyDuration);
            }
        }
        
        // Leer bloques no accesibles
        const blockData = [];
        
        for (let i = 0; i < blocks.length; i++) {
            const dayElement = document.getElementById(`blockDay${blocks[i].index}`);
            const timeElement = document.getElementById(`blockTime${blocks[i].index}`);
            
            if (!dayElement || !timeElement) continue;
            
            const day = parseInt(dayElement.value) - 1; // Ajustar a 0-6
            const timeStr = timeElement.value;
            
            if (timeStr) {
                const timeParts = timeStr.split('-');
                if (timeParts.length === 2) {
                    const blockStart = convertTimeToMinutes(trim(timeParts[0]));
                    const blockEnd = convertTimeToMinutes(trim(timeParts[1]));
                    
                    if (blockEnd > blockStart) {
                        // Ajustar día según día de inicio
                        const adjustedDay = (day - startDay + 7) % 7;
                        blockData.push({ day: adjustedDay, start: blockStart, end: blockEnd });
                        dailyDurations.push(blockEnd - blockStart);
                    }
                }
            }
        }
        
        // Calcular intervalo de minutos
        const intervalMinutes = calculateGCD(dailyDurations) || 30;
        
        // Calcular número de filas
        const numRows = Math.floor(totalMinutes / intervalMinutes) + 1;
        const cols = numDays + 2;
        
        // Crear matriz
        scheduleMatrix = Array(numRows).fill().map(() => Array(cols).fill(''));
        
        // Llenar primera fila con encabezados
        scheduleMatrix[0][0] = 'Inicio';
        scheduleMatrix[0][1] = 'Final';
        
        for (let j = 2; j < cols; j++) {
            scheduleMatrix[0][j] = daysOfWeek[(startDay + (j - 2)) % 7];
        }
        
        // Llenar columnas de tiempo
        let currentTime = startTime;
        for (let i = 1; i < numRows; i++) {
            scheduleMatrix[i][0] = convertMinutesToTime(currentTime);
            
            const nextTime = currentTime + intervalMinutes;
            scheduleMatrix[i][1] = convertMinutesToTime(Math.min(nextTime, endTime));
            
            currentTime = nextTime;
            if (currentTime >= endTime) break;
        }
        
        // Marcar bloques no accesibles
        for (let i = 1; i < numRows; i++) {
            for (let j = 2; j < cols; j++) {
                const dayIndex = (j - 2);
                const currentMinutes = startTime + (i - 1) * intervalMinutes;
                
                for (const block of blockData) {
                    if (dayIndex === block.day && 
                        currentMinutes >= block.start && 
                        currentMinutes < block.end) {
                        scheduleMatrix[i][j] = 'N/A';
                    }
                }
                
                if (!scheduleMatrix[i][j]) {
                    scheduleMatrix[i][j] = ' ';
                }
            }
        }
        
        // Asignar actividades
        let lastOccupiedColumn = 2;
        
        for (let actIndex = 0; actIndex < activityData.length; actIndex++) {
            const activity = activityData[actIndex];
            let remainingDuration = activity.duration;
            let daysCounted = 0;
            
            let startColumn = 2;
            if (activity.startType === 2 && actIndex > 0) {
                startColumn = lastOccupiedColumn + 1;
            }
            
            for (let col = startColumn; col < cols && daysCounted < numDays; col++) {
                let minutesAssignedToday = 0;
                let activityAssigned = false;
                
                for (let row = 1; row < numRows && minutesAssignedToday < activity.dailyDuration; row++) {
                    if (scheduleMatrix[row][col] === ' ' && remainingDuration > 0) {
                        const currentTime = startTime + (row - 1) * intervalMinutes;
                        
                        // Verificar si está en un bloque no accesible
                        let isBlocked = false;
                        const dayIndex = col - 2;
                        
                        for (const block of blockData) {
                            if (dayIndex === block.day && 
                                currentTime >= block.start && 
                                currentTime < block.end) {
                                isBlocked = true;
                                break;
                            }
                        }
                        
                        if (!isBlocked) {
                            const availableMinutes = Math.min(
                                activity.dailyDuration - minutesAssignedToday, 
                                intervalMinutes
                            );
                            
                            scheduleMatrix[row][col] = activity.name;
                            minutesAssignedToday += availableMinutes;
                            remainingDuration -= availableMinutes;
                            activityAssigned = true;
                            
                            if (remainingDuration <= 0) break;
                        }
                    }
                }
                
                if (activityAssigned) {
                    daysCounted++;
                    lastOccupiedColumn = col;
                }
                
                if (remainingDuration <= 0) break;
            }
            
            if (remainingDuration > 0) {
                console.warn(`No se pudo completar la actividad: ${activity.name}`);
            }
        }
        
        // Mostrar resultado
        displaySchedule();
        
    } catch (error) {
        alert('Error: ' + error.message);
    }
}

function displaySchedule() {
    const tableContainer = document.getElementById('scheduleTable');
    const exportBtn = document.getElementById('exportBtn');
    
    if (scheduleMatrix.length === 0) {
        tableContainer.innerHTML = '<p>No hay horario generado</p>';
        exportBtn.classList.add('hidden');
        return;
    }
    
    let tableHTML = '<table class="schedule-table">';
    
    for (let i = 0; i < scheduleMatrix.length; i++) {
        tableHTML += '<tr>';
        
        for (let j = 0; j < scheduleMatrix[i].length; j++) {
            const cell = scheduleMatrix[i][j];
            let cellClass = '';
            
            if (i === 0) {
                cellClass = 'time-cell';
            } else if (j < 2) {
                cellClass = 'time-cell';
            } else if (cell === 'N/A') {
                cellClass = 'na-cell';
            } else if (cell !== ' ' && cell !== '') {
                cellClass = 'activity-cell';
            }
            
            const tag = i === 0 ? 'th' : 'td';
            tableHTML += `<${tag} class="${cellClass}">${cell || ''}</${tag}>`;
        }
        
        tableHTML += '</tr>';
    }
    
    tableHTML += '</table>';
    tableContainer.innerHTML = tableHTML;
    exportBtn.classList.remove('hidden');
}

function exportToCSV() {
    if (scheduleMatrix.length === 0) {
        alert('No hay horario para exportar');
        return;
    }
    
    let csvContent = '';
    
    for (let i = 0; i < scheduleMatrix.length; i++) {
        const row = scheduleMatrix[i].map(cell => `"${cell || ''}"`).join(',');
        csvContent += row + '\n';
    }
    
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    
    if (link.download !== undefined) {
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', 'horarios.csv');
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
}

// Inicializar con una actividad y un bloque por defecto
document.addEventListener('DOMContentLoaded', function() {
    addActivity();
    addBlock();
});
