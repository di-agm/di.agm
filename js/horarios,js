// Variables globales
let scheduleMatrix = [];
let activities = [];
let blocks = [];
const daysOfWeek = ["Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado", "Domingo"];

// -------- Utilidades --------
function evaluateExpression(expression) {
  try {
    const clean = expression.replace(/[^0-9+\-*/()\s]/g, "");
    return Function('"use strict";return(' + clean + ")")();
  } catch {
    return parseInt(expression) || 0;
  }
}
function convertTimeToMinutes(timeStr) {
  const [h, m] = timeStr.split(":").map(n => parseInt(n));
  return h * 60 + m;
}
function convertMinutesToTime(mins) {
  const h = Math.floor(mins / 60);
  const m = mins % 60;
  return `${h.toString().padStart(2, "0")}:${m.toString().padStart(2, "0")}`;
}
function gcd(a, b) {
  while (b !== 0) [a, b] = [b, a % b];
  return a;
}
function calculateGCD(arr) {
  if (!arr.length) return 1;
  return arr.reduce((acc, n) => gcd(acc, n));
}
const trim = str => str.trim();

// -------- Actividades --------
function addActivity() {
  const container = document.getElementById("activitiesContainer");
  const index = activities.length;

  const div = document.createElement("div");
  div.className = "activity-item";
  div.innerHTML = `
    <div class="inline-group">
      <div>
        <label>Nombre de la actividad:</label>
        <input type="text" id="activityName${index}" placeholder="Nombre de la actividad">
      </div>
      <div>
        <button type="button" class="remove-btn" data-remove-activity="${index}">Eliminar</button>
      </div>
    </div>
    <div class="form-group">
      <label>Duración total:</label>
      <input type="text" id="activityDuration${index}" placeholder="Ej: 120 o 60*2">
    </div>
    <div class="form-group">
      <label>Duración diaria:</label>
      <input type="text" id="activityDailyDuration${index}" placeholder="Ej: 60 o 30*2">
    </div>
    <div class="form-group">
      <label>Tipo de inicio:</label>
      <select id="activityStartType${index}">
        <option value="1">Desde el primer horario disponible</option>
        <option value="2">Después de la actividad anterior</option>
      </select>
    </div>`;
  container.appendChild(div);
  activities.push({ index });
}
function removeActivity(index) {
  activities = activities.filter(a => a.index !== index);
  const el = document.querySelector(`[data-remove-activity="${index}"]`)?.closest(".activity-item");
  if (el) el.remove();
}

// -------- Bloques --------
function addBlock() {
  const container = document.getElementById("blocksContainer");
  const index = blocks.length;

  const div = document.createElement("div");
  div.className = "block-item";
  div.innerHTML = `
    <div class="inline-group">
      <div>
        <label>Día (1=Lunes, 7=Domingo):</label>
        <select id="blockDay${index}">
          <option value="1">Lunes</option>
          <option value="2">Martes</option>
          <option value="3">Miércoles</option>
          <option value="4">Jueves</option>
          <option value="5">Viernes</option>
          <option value="6">Sábado</option>
          <option value="7">Domingo</option>
        </select>
      </div>
      <div>
        <button type="button" class="remove-btn" data-remove-block="${index}">Eliminar</button>
      </div>
    </div>
    <div class="form-group">
      <label>Hora de inicio y fin (HH:MM - HH:MM):</label>
      <input type="text" id="blockTime${index}" placeholder="Ej: 12:00 - 13:00">
    </div>`;
  container.appendChild(div);
  blocks.push({ index });
}
function removeBlock(index) {
  blocks = blocks.filter(b => b.index !== index);
  const el = document.querySelector(`[data-remove-block="${index}"]`)?.closest(".block-item");
  if (el) el.remove();
}

// -------- Generador --------
function generateSchedule() {
  try {
    const numDays = evaluateExpression(document.getElementById("numDays").value);
    const timeRange = document.getElementById("timeRange").value;
    const startDay = parseInt(document.getElementById("startDay").value) - 1;

    // validar rango
    const [startStr, endStr] = timeRange.split("-");
    if (!endStr) throw new Error("Formato incorrecto. Use HH:MM - HH:MM");

    const startTime = convertTimeToMinutes(trim(startStr));
    const endTime = convertTimeToMinutes(trim(endStr));
    if (endTime <= startTime) throw new Error("La hora de fin debe ser después");

    const totalMinutes = endTime - startTime;

    // actividades
    const activityData = [];
    const dailyDurations = [];
    for (const a of activities) {
      const name = document.getElementById(`activityName${a.index}`)?.value || "";
      const duration = evaluateExpression(document.getElementById(`activityDuration${a.index}`)?.value || "");
      const daily = evaluateExpression(document.getElementById(`activityDailyDuration${a.index}`)?.value || "");
      const startType = parseInt(document.getElementById(`activityStartType${a.index}`)?.value || "1");
      if (name && duration > 0 && daily > 0) {
        activityData.push({ name, duration, dailyDuration: daily, startType });
        dailyDurations.push(daily);
      }
    }

    // bloques
    const blockData = [];
    for (const b of blocks) {
      const day = parseInt(document.getElementById(`blockDay${b.index}`)?.value || "1") - 1;
      const str = document.getElementById(`blockTime${b.index}`)?.value || "";
      if (str.includes("-")) {
        const [s, e] = str.split("-");
        const bs = convertTimeToMinutes(trim(s));
        const be = convertTimeToMinutes(trim(e));
        if (be > bs) {
          const adjDay = (day - startDay + 7) % 7;
          blockData.push({ day: adjDay, start: bs, end: be });
          dailyDurations.push(be - bs);
        }
      }
    }

    const interval = calculateGCD(dailyDurations) || 30;
    const rows = Math.floor(totalMinutes / interval) + 1;
    const cols = numDays + 2;
    scheduleMatrix = Array.from({ length: rows }, () => Array(cols).fill(""));

    // encabezados
    scheduleMatrix[0][0] = "Inicio";
    scheduleMatrix[0][1] = "Final";
    for (let j = 2; j < cols; j++) {
      scheduleMatrix[0][j] = daysOfWeek[(startDay + j - 2) % 7];
    }

    // tiempos
    let t = startTime;
    for (let i = 1; i < rows; i++) {
      scheduleMatrix[i][0] = convertMinutesToTime(t);
      const next = t + interval;
      scheduleMatrix[i][1] = convertMinutesToTime(Math.min(next, endTime));
      t = next;
      if (t >= endTime) break;
    }

    // marcar bloques
    for (let i = 1; i < rows; i++) {
      for (let j = 2; j < cols; j++) {
        const dayIdx = j - 2;
        const mins = startTime + (i - 1) * interval;
        const block = blockData.find(b => b.day === dayIdx && mins >= b.start && mins < b.end);
        scheduleMatrix[i][j] = block ? "N/A" : " ";
      }
    }

    // asignar actividades
    let lastCol = 2;
    for (let a = 0; a < activityData.length; a++) {
      let act = activityData[a];
      let remain = act.duration;
      let counted = 0;
      let startCol = act.startType === 2 && a > 0 ? lastCol + 1 : 2;

      for (let c = startCol; c < cols && counted < numDays; c++) {
        let today = 0;
        for (let r = 1; r < rows && today < act.dailyDuration; r++) {
          if (scheduleMatrix[r][c] === " " && remain > 0) {
            scheduleMatrix[r][c] = act.name;
            today += interval;
            remain -= interval;
          }
        }
        if (today > 0) {
          counted++;
          lastCol = c;
        }
        if (remain <= 0) break;
      }
    }

    displaySchedule();
  } catch (e) {
    alert("Error: " + e.message);
  }
}

function displaySchedule() {
  const tableContainer = document.getElementById("scheduleTable");
  const exportBtn = document.getElementById("exportBtn");
  if (!scheduleMatrix.length) {
    tableContainer.innerHTML = "<p>No hay horario generado</p>";
    exportBtn.classList.add("hidden");
    return;
  }

  let html = '<table class="schedule-table">';
  scheduleMatrix.forEach((row, i) => {
    html += "<tr>";
    row.forEach((cell, j) => {
      let cls = "";
      if (i === 0 || j < 2) cls = "time-cell";
      else if (cell === "N/A") cls = "na-cell";
      else if (cell.trim()) cls = "activity-cell";
      const tag = i === 0 ? "th" : "td";
      html += `<${tag} class="${cls}">${cell || ""}</${tag}>`;
    });
    html += "</tr>";
  });
  html += "</table>";
  tableContainer.innerHTML = html;
  exportBtn.classList.remove("hidden");
}

function exportToCSV() {
  if (!scheduleMatrix.length) return alert("No hay horario para exportar");
  let csv = scheduleMatrix.map(row => row.map(c => `"${c || ""}"`).join(",")).join("\n");
  const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
  const link = document.createElement("a");
  link.href = URL.createObjectURL(blob);
  link.download = "horarios.csv";
  link.click();
}

// -------- Inicializar --------
document.addEventListener("DOMContentLoaded", () => {
  document.getElementById("addActivityBtn").addEventListener("click", addActivity);
  document.getElementById("addBlockBtn").addEventListener("click", addBlock);
  document.getElementById("generateBtn").addEventListener("click", generateSchedule);
  document.getElementById("exportBtn").addEventListener("click", exportToCSV);

  // eliminar dinámicamente
  document.addEventListener("click", e => {
    if (e.target.dataset.removeActivity !== undefined) {
      removeActivity(parseInt(e.target.dataset.removeActivity));
    }
    if (e.target.dataset.removeBlock !== undefined) {
      removeBlock(parseInt(e.target.dataset.removeBlock));
    }
  });

  // valores por defecto
  addActivity();
  addBlock();
});
